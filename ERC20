// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

contract ManoERC20Token {
    string public constant name = "ManoERC20Token";
    string public constant symbol = "MTK";
    uint8 public constant decimals = 18;
    //uint256 public constant totalSupply = 1000000 * 10**uint256(decimals);
    

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval( address indexed owner, address indexed spender, uint256 value);

    mapping(address => uint256) balanceOf;
    mapping (address => mapping (address => uint256)) allowed;
    uint256 totalSupply_;


    constructor( uint256 total) {
        totalSupply_ = total;
        balanceOf[msg.sender] = totalSupply_;
    }

    function totalSupply() public view returns (uint256) {
        return totalSupply_;

    }

    function balances (address tokenOwner) public view returns (uint256) {
        return balanceOf [tokenOwner];
    
    }

    function transfer(address _to, uint256 _value) public returns (bool) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        return true;
    }


    function approve (address delegate, uint256 numTokens) public returns (bool) {
        allowed [msg.sender] [delegate] = numTokens;
        emit Approval (msg.sender, delegate, numTokens);
        return true;

    }

    function allowance (address owner, address delegate) public view returns (uint) {
        return allowed [owner] [delegate];
        
    }
    
    function transferFrom (address owner, address buyer, uint256 numTokens) public returns (bool) {

        require (numTokens <= balanceOf [owner]);
        require (numTokens <= allowed [owner] [msg.sender]);

        balanceOf [owner] = balanceOf [owner] - numTokens;
        allowed [owner] [msg.sender] = allowed [owner] [msg.sender] - numTokens;
        balanceOf [buyer] = balanceOf [buyer] = numTokens;
        emit Transfer (owner, buyer, numTokens);
        return true;
        

    }

}
